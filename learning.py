import numpy as np
import pickle

from sklearn import tree, neighbors

X = [[69.0, 80.0, 12.0], [75.0, 82.0, 30.0], [128.0, 142.0, 107.0], [68.0, 76.0, 16.0], [80.0, 93.0, 24.0], [69.0, 82.0, 28.0], [86.0, 98.0, 60.0], [167.0, 142.0, 79.0], [168.0, 139.0, 73.0], [161.0, 130.0, 66.0], [148.0, 114.0, 57.0], [162.0, 125.0, 65.0], [168.0, 139.0, 73.0], [137.0, 122.0, 59.0], [162.0, 135.0, 75.0], [167.0, 142.0, 79.0], [165.0, 146.0, 82.0], [170.0, 139.0, 75.0], [148.0, 108.0, 56.0], [150.0, 120.0, 65.0], [89.0, 102.0, 57.0], [84.0, 90.0, 43.0], [62.0, 65.0, 17.0], [55.0, 61.0, 17.0], [55.0, 62.0, 21.0], [78.0, 87.0, 30.0], [61.0, 64.0, 21.0], [74.0, 81.0, 27.0], [184.0, 133.0, 68.0], [183.0, 146.0, 82.0], [175.0, 141.0, 86.0], [175.0, 141.0, 87.0], [188.0, 134.0, 86.0], [167.0, 160.0, 150.0], [146.0, 110.0, 88.0], [148.0, 102.0, 74.0], [149.0, 115.0, 76.0], [149.0, 115.0, 76.0], [148.0, 114.0, 75.0], [154.0, 122.0, 97.0], [166.0, 131.0, 109.0], [174.0, 127.0, 105.0], [163.0, 126.0, 98.0], [172.0, 137.0, 73.0], [220.0, 173.0, 114.0], [236.0, 203.0, 142.0], [169.0, 166.0, 83.0], [222.0, 189.0, 117.0], [217.0, 180.0, 103.0], [228.0, 191.0, 128.0], [214.0, 174.0, 117.0], [172.0, 142.0, 108.0], [138.0, 113.0, 73.0], [142.0, 117.0, 77.0], [133.0, 110.0, 77.0], [208.0, 140.0, 94.0], [198.0, 151.0, 83.0], [188.0, 143.0, 98.0], [64.0, 74.0, 22.0], [69.0, 75.0, 13.0], [74.0, 80.0, 18.0], [102.0, 112.0, 65.0], [148.0, 162.0, 127.0], [148.0, 162.0, 127.0], [87.0, 91.0, 55.0], [103.0, 111.0, 89.0], [103.0, 111.0, 89.0], [93.0, 95.0, 48.0], [113.0, 127.0, 94.0], [84.0, 98.0, 44.0], [175.0, 141.0, 95.0], [172.0, 133.0, 94.0], [171.0, 127.0, 80.0], [169.0, 128.0, 84.0], [170.0, 120.0, 70.0], [175.0, 124.0, 75.0], [162.0, 116.0, 57.0], [186.0, 146.0, 92.0], [202.0, 152.0, 95.0], [175.0, 126.0, 73.0], [166.0, 131.0, 111.0], [72.0, 80.0, 31.0], [33.0, 39.0, 3.0], [29.0, 35.0, 1.0], [103.0, 113.0, 48.0], [80.0, 90.0, 40.0], [77.0, 84.0, 52.0], [121.0, 117.0, 54.0], [121.0, 123.0, 58.0], [122.0, 127.0, 61.0], [72.0, 79.0, 45.0], [60.0, 68.0, 31.0], [68.0, 77.0, 49.0], [87.0, 103.0, 58.0], [68.0, 81.0, 28.0], [182.0, 145.0, 100.0], [172.0, 133.0, 94.0], [173.0, 136.0, 93.0], [162.0, 119.0, 65.0], [154.0, 112.0, 64.0], [164.0, 123.0, 93.0], [149.0, 109.0, 82.0], [127.0, 93.0, 68.0], [189.0, 149.0, 111.0], [167.0, 131.0, 110.0], [171.0, 128.0, 88.0], [139.0, 103.0, 66.0], [130.0, 115.0, 79.0], [166.0, 125.0, 91.0], [215.0, 177.0, 107.0], [223.0, 183.0, 105.0], [224.0, 189.0, 105.0], [208.0, 167.0, 105.0], [214.0, 184.0, 114.0], [185.0, 148.0, 93.0], [216.0, 167.0, 101.0], [163.0, 119.0, 83.0], [173.0, 132.0, 88.0], [198.0, 136.0, 84.0], [110.0, 76.0, 50.0], [145.0, 110.0, 82.0], [163.0, 124.0, 94.0], [130.0, 93.0, 64.0], [197.0, 144.0, 86.0], [147.0, 104.0, 66.0], [182.0, 136.0, 97.0], [207.0, 148.0, 91.0], [214.0, 155.0, 98.0], [221.0, 167.0, 104.0], [215.0, 182.0, 110.0], [189.0, 154.0, 111.0], [152.0, 124.0, 95.0], [181.0, 121.0, 78.0], [184.0, 138.0, 86.0], [230.0, 193.0, 129.0], [191.0, 150.0, 118.0], [146.0, 113.0, 96.0], [205.0, 160.0, 111.0], [204.0, 153.0, 95.0], [106.0, 78.0, 41.0], [97.0, 72.0, 41.0], [87.0, 62.0, 31.0], [74.0, 49.0, 18.0], [93.0, 68.0, 36.0], [99.0, 74.0, 33.0], [90.0, 64.0, 26.0], [104.0, 76.0, 38.0], [166.0, 168.0, 167.0], [156.0, 158.0, 157.0], [160.0, 162.0, 161.0], [231.0, 240.0, 247.0], [172.0, 182.0, 193.0], [111.0, 117.0, 103.0], [115.0, 119.0, 113.0], [170.0, 158.0, 160.0], [193.0, 201.0, 203.0], [173.0, 181.0, 178.0], [246.0, 122.0, 180.0], [242.0, 118.0, 167.0], [131.0, 138.0, 130.0], [161.0, 165.0, 168.0], [144.0, 147.0, 146.0], [141.0, 137.0, 134.0], [156.0, 143.0, 135.0], [165.0, 156.0, 149.0], [145.0, 136.0, 129.0], [136.0, 127.0, 120.0], [208.0, 215.0, 225.0], [224.0, 232.0, 243.0], [214.0, 221.0, 231.0], [202.0, 209.0, 218.0], [215.0, 222.0, 232.0], [220.0, 227.0, 235.0], [121.0, 124.0, 117.0], [168.0, 172.0, 174.0], [122.0, 124.0, 121.0], [173.0, 177.0, 178.0], [227.0, 235.0, 246.0], [219.0, 226.0, 236.0], [232.0, 239.0, 249.0], [187.0, 178.0, 171.0], [136.0, 124.0, 112.0], [131.0, 124.0, 116.0], [155.0, 155.0, 157.0], [155.0, 154.0, 150.0], [157.0, 151.0, 147.0], [155.0, 151.0, 148.0], [192.0, 191.0, 197.0], [188.0, 188.0, 191.0], [156.0, 152.0, 149.0], [145.0, 140.0, 136.0], [162.0, 165.0, 167.0], [161.0, 163.0, 166.0], [178.0, 179.0, 181.0], [117.0, 123.0, 112.0], [131.0, 132.0, 127.0], [186.0, 165.0, 175.0], [197.0, 205.0, 207.0], [169.0, 179.0, 178.0]]
y = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

X_test = [[71.0, 79.0, 30.0], [78.0, 85.0, 35.0], [167.0, 130.0, 105.0], [232.0, 194.0, 126.0], [172.0, 131.0, 86.0], [164.0, 121.0, 85.0], [141.0, 97.0, 62.0], [194.0, 161.0, 93.0], [198.0, 155.0, 102.0], [188.0, 140.0, 91.0], [187.0, 153.0, 104.0], [62.0, 69.0, 17.0], [68.0, 84.0, 11.0], [75.0, 88.0, 29.0], [73.0, 84.0, 29.0], [107.0, 80.0, 48.0], [157.0, 131.0, 77.0], [60.0, 71.0, 28.0], [83.0, 99.0, 50.0], [48.0, 53.0, 12.0], [151.0, 112.0, 79.0], [139.0, 108.0, 82.0], [175.0, 129.0, 83.0], [184.0, 124.0, 70.0], [145.0, 112.0, 64.0]]
y_test = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2]

X, y, X_test, y_test = map(np.array, [X, y, X_test, y_test])

# clf = tree.DecisionTreeClassifier()
clf = neighbors.KNeighborsClassifier()

if __name__ == '__main__':
    clf = clf.fit(X, y)
    pred = clf.predict(X_test)
    acc = np.sum([1 if pred[i] == y_test[i] else 0 for i in range(len(pred))]) / len(pred)

    print(f"Accuracy: {acc}")

    with open(f"model_{acc}.knbclf", "wb") as file:
        pickle.dump(clf, file)
